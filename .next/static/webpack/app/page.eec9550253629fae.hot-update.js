"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./hooks/use-trade-streak.ts":
/*!***********************************!*\
  !*** ./hooks/use-trade-streak.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useTradeStreak: function() { return /* binding */ useTradeStreak; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* __next_internal_client_entry_do_not_use__ useTradeStreak auto */ \n\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__.createClient)(\"https://azfvpokygmsgtztybdgf.supabase.co/\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF6ZnZwb2t5Z21zZ3R6dHliZGdmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjcxMTYyNjUsImV4cCI6MjA0MjY5MjI2NX0.qRR8SnnXKwEm6yxrtwAq7X7tazAFh-hoZm2nAI1YhYI\");\nfunction useTradeStreak(userId) {\n    const [projects, setProjects] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [currentProject, setCurrentProject] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [tasks, setTasks] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [streak, setStreak] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [completedToday, setCompletedToday] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [completedDays, setCompletedDays] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [selectedYear, setSelectedYear] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(new Date().getFullYear());\n    const [availableYears, setAvailableYears] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const fetchProjects = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        if (!userId) return;\n        const { data, error } = await supabase.from(\"projects\").select(\"*\").eq(\"user_id\", userId);\n        if (error) {\n            console.error(\"Error fetching projects:\", error);\n            return;\n        }\n        if (data) {\n            setProjects(data);\n            if (data.length > 0 && !currentProject) {\n                setCurrentProject(data[0]);\n            }\n        }\n    }, [\n        userId,\n        currentProject\n    ]);\n    const fetchTasks = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (projectId)=>{\n        const today = new Date().toISOString().split(\"T\")[0];\n        const { data: allTasks, error: tasksError } = await supabase.from(\"tasks\").select(\"*\").eq(\"project_id\", projectId);\n        if (tasksError) {\n            console.error(\"Error fetching tasks:\", tasksError);\n            return;\n        }\n        const { count, error: countError } = await supabase.from(\"tasks\").select(\"*\", {\n            count: \"exact\",\n            head: true\n        }).eq(\"project_id\", projectId).eq(\"completed\", true).eq(\"completed_date\", today);\n        if (countError) {\n            console.error(\"Error counting completed tasks:\", countError);\n            return;\n        }\n        if (allTasks) {\n            setTasks(allTasks);\n            setCompletedToday(count || 0);\n            updateStats(allTasks, projectId);\n        }\n    }, []);\n    const fetchCompletedDays = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (projectId, year)=>{\n        const startDate = new Date(year, 0, 1).toISOString().split(\"T\")[0];\n        const endDate = new Date(year, 11, 31).toISOString().split(\"T\")[0];\n        const { data, error } = await supabase.from(\"tasks\").select(\"completed_date\").eq(\"project_id\", projectId).eq(\"completed\", true).gte(\"completed_date\", startDate).lte(\"completed_date\", endDate);\n        if (error) {\n            console.error(\"Error fetching completed days:\", error);\n            return;\n        }\n        if (data) {\n            const completedDays = data.map((task)=>{\n                const date = new Date(task.completed_date);\n                return Math.floor((date.getTime() - new Date(year, 0, 0).getTime()) / (24 * 60 * 60 * 1000));\n            });\n            setCompletedDays([\n                ...new Set(completedDays)\n            ]);\n        }\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (userId) {\n            fetchProjects();\n        }\n    }, [\n        userId,\n        fetchProjects\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (currentProject) {\n            fetchTasks(currentProject.id);\n        }\n    }, [\n        currentProject,\n        fetchTasks\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (currentProject && selectedYear) {\n            fetchCompletedDays(currentProject.id, selectedYear);\n        }\n    }, [\n        currentProject,\n        selectedYear,\n        fetchCompletedDays\n    ]);\n    const addProject = async (name, tradingDaysPerWeek, userId)=>{\n        const { data, error } = await supabase.from(\"projects\").insert({\n            name,\n            trading_days_per_week: tradingDaysPerWeek,\n            user_id: userId\n        }).select();\n        if (error) {\n            console.error(\"Error adding project:\", error);\n            return;\n        }\n        if (data && data.length > 0) {\n            const newProject = data[0];\n            setProjects((prevProjects)=>[\n                    ...prevProjects,\n                    newProject\n                ]);\n            setCurrentProject(newProject);\n        }\n    };\n    const addTask = async (content)=>{\n        if (content.trim() && currentProject && userId) {\n            const newTask = {\n                content: content.trim(),\n                project_id: currentProject.id,\n                completed: false,\n                completed_date: null,\n                user_id: userId\n            };\n            const { data, error } = await supabase.from(\"tasks\").insert(newTask).select();\n            if (error) {\n                console.error(\"Error adding task:\", error);\n                return;\n            }\n            if (data && data.length > 0) {\n                const addedTask = data[0];\n                const updatedTasks = [\n                    ...tasks,\n                    addedTask\n                ];\n                setTasks(updatedTasks);\n                updateStats(updatedTasks, currentProject.id);\n            }\n        }\n    };\n    const deleteTask = async (id)=>{\n        if (!currentProject) return;\n        const { error } = await supabase.from(\"tasks\").delete().eq(\"id\", id);\n        if (error) {\n            console.error(\"Error deleting task:\", error);\n            return;\n        }\n        const updatedTasks = tasks.filter((task)=>task.id !== id);\n        setTasks(updatedTasks);\n        updateStats(updatedTasks, currentProject.id);\n    };\n    const toggleComplete = async (id)=>{\n        if (!currentProject) return;\n        const task = tasks.find((t)=>t.id === id);\n        if (task) {\n            const updatedTask = {\n                ...task,\n                completed: !task.completed,\n                completed_date: !task.completed ? new Date().toISOString().split(\"T\")[0] : null\n            };\n            const { data, error } = await supabase.from(\"tasks\").update(updatedTask).eq(\"id\", id).select();\n            if (error) {\n                console.error(\"Error updating task:\", error);\n                return;\n            }\n            if (data && data.length > 0) {\n                const updatedTaskFromDB = data[0];\n                const updatedTasks = tasks.map((t)=>t.id === id ? updatedTaskFromDB : t);\n                setTasks(updatedTasks);\n                updateStats(updatedTasks, currentProject.id);\n            }\n        }\n    };\n    const updateStats = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (currentTasks, projectId)=>{\n        if (!currentProject) return;\n        const today = new Date().toISOString().split(\"T\")[0];\n        // Fetch completed tasks for the last 365 days\n        const oneYearAgo = new Date();\n        oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);\n        const oneYearAgoString = oneYearAgo.toISOString().split(\"T\")[0];\n        const { data: completedTasks, error: completedTasksError } = await supabase.from(\"tasks\").select(\"completed_date\").eq(\"project_id\", projectId).eq(\"completed\", true).gte(\"completed_date\", oneYearAgoString).order(\"completed_date\", {\n            ascending: false\n        });\n        if (completedTasksError) {\n            console.error(\"Error fetching completed tasks:\", completedTasksError);\n            return;\n        }\n        // Count completed tasks for today\n        const completedToday = completedTasks.filter((task)=>task.completed_date === today).length;\n        setCompletedToday(completedToday);\n        // Calculate streak\n        let currentStreak = 0;\n        let consecutiveDays = 0;\n        let lastCompletedDate = new Date(today);\n        const tradingDaysPerWeek = currentProject.trading_days_per_week;\n        for (const task of completedTasks){\n            const taskDate = new Date(task.completed_date);\n            const daysDifference = Math.floor((lastCompletedDate.getTime() - taskDate.getTime()) / (1000 * 60 * 60 * 24));\n            if (daysDifference === 0) {\n                continue;\n            } else if (daysDifference === 1) {\n                // Consecutive day\n                consecutiveDays++;\n                currentStreak++;\n            } else {\n                // Break in streak\n                const weeksDifference = Math.floor(daysDifference / 7);\n                const remainingDays = daysDifference % 7;\n                if (weeksDifference === 0 && remainingDays <= 7 - tradingDaysPerWeek) {\n                    // Still within the allowed non-trading days\n                    consecutiveDays++;\n                    currentStreak++;\n                } else {\n                    break;\n                }\n            }\n            // Check if we've completed more days than trading_days_per_week in the current week\n            const startOfWeek = new Date(taskDate);\n            startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());\n            const tasksThisWeek = completedTasks.filter((t)=>new Date(t.completed_date) >= startOfWeek && new Date(t.completed_date) <= taskDate).length;\n            if (tasksThisWeek > tradingDaysPerWeek) {\n                break;\n            }\n            lastCompletedDate = taskDate;\n        }\n        setStreak(currentStreak);\n        // Update completed days for the contributions chart\n        const completedDaysInSelectedYear = completedTasks.filter((task)=>new Date(task.completed_date).getFullYear() === selectedYear).map((task)=>{\n            const date = new Date(task.completed_date);\n            return Math.floor((date.getTime() - new Date(selectedYear, 0, 0).getTime()) / (24 * 60 * 60 * 1000));\n        });\n        setCompletedDays([\n            ...new Set(completedDaysInSelectedYear)\n        ]);\n        // Update available years\n        const years = new Set();\n        completedTasks.forEach((task)=>{\n            if (task.completed_date) {\n                years.add(new Date(task.completed_date).getFullYear());\n            }\n        });\n        const sortedYears = Array.from(years).sort((a, b)=>b - a);\n        if (sortedYears.length === 0) {\n            setAvailableYears([\n                new Date().getFullYear()\n            ]);\n        } else {\n            setAvailableYears(sortedYears);\n        }\n        if (sortedYears.length > 0 && !sortedYears.includes(selectedYear)) {\n            setSelectedYear(sortedYears[0]);\n        }\n    }, [\n        currentProject,\n        selectedYear\n    ]);\n    return {\n        projects,\n        currentProject,\n        setCurrentProject,\n        tasks,\n        streak,\n        completedToday,\n        completedDays,\n        selectedYear,\n        setSelectedYear,\n        availableYears,\n        addProject,\n        addTask,\n        deleteTask,\n        toggleComplete,\n        fetchProjects,\n        fetchTasks,\n        fetchCompletedDays\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2hvb2tzL3VzZS10cmFkZS1zdHJlYWsudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztvRUFFd0Q7QUFFSjtBQUVwRCxNQUFNSSxXQUFXRCxtRUFBWUEsQ0FBQ0UsMkNBQW9DLEVBQUdBLGtOQUF5QztBQUV2RyxTQUFTSSxlQUFlQyxNQUEwQjtJQUN2RCxNQUFNLENBQUNDLFVBQVVDLFlBQVksR0FBR1osK0NBQVFBLENBQVksRUFBRTtJQUN0RCxNQUFNLENBQUNhLGdCQUFnQkMsa0JBQWtCLEdBQUdkLCtDQUFRQSxDQUFpQjtJQUNyRSxNQUFNLENBQUNlLE9BQU9DLFNBQVMsR0FBR2hCLCtDQUFRQSxDQUFTLEVBQUU7SUFDN0MsTUFBTSxDQUFDaUIsUUFBUUMsVUFBVSxHQUFHbEIsK0NBQVFBLENBQUM7SUFDckMsTUFBTSxDQUFDbUIsZ0JBQWdCQyxrQkFBa0IsR0FBR3BCLCtDQUFRQSxDQUFDO0lBQ3JELE1BQU0sQ0FBQ3FCLGVBQWVDLGlCQUFpQixHQUFHdEIsK0NBQVFBLENBQVcsRUFBRTtJQUMvRCxNQUFNLENBQUN1QixjQUFjQyxnQkFBZ0IsR0FBR3hCLCtDQUFRQSxDQUFDLElBQUl5QixPQUFPQyxXQUFXO0lBQ3ZFLE1BQU0sQ0FBQ0MsZ0JBQWdCQyxrQkFBa0IsR0FBRzVCLCtDQUFRQSxDQUFXLEVBQUU7SUFFakUsTUFBTTZCLGdCQUFnQjNCLGtEQUFXQSxDQUFDO1FBQ2hDLElBQUksQ0FBQ1EsUUFBUTtRQUViLE1BQU0sRUFBRW9CLElBQUksRUFBRUMsS0FBSyxFQUFFLEdBQUcsTUFBTTNCLFNBQzNCNEIsSUFBSSxDQUFDLFlBQ0xDLE1BQU0sQ0FBQyxLQUNQQyxFQUFFLENBQUMsV0FBV3hCO1FBRWpCLElBQUlxQixPQUFPO1lBQ1RJLFFBQVFKLEtBQUssQ0FBQyw0QkFBNEJBO1lBQzFDO1FBQ0Y7UUFFQSxJQUFJRCxNQUFNO1lBQ1JsQixZQUFZa0I7WUFDWixJQUFJQSxLQUFLTSxNQUFNLEdBQUcsS0FBSyxDQUFDdkIs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QUN6QyxPQUFPQyxLQUFLQyxLQUFLLENBQUMsQ0FBQ0gsS0FBS0ksT0FBTyxLQUFLLElBQUluQyxLQUFLRixjQUFjLEdBQUcsR0FBR3FDLE9BQU8sRUFBQyxJQUFNLE1BQUssS0FBSyxLQUFLLElBQUc7UUFDbkc7UUFFRnRDLGlCQUFpQjtlQUFJLElBQUl1QyxJQUFJK0M7U0FBNkI7UUFFMUQseUJBQXlCO1FBQ3pCLE1BQU1DLFFBQVEsSUFBSWhEO1FBQ2xCK0IsZUFBZWtCLE9BQU8sQ0FBQ3ZELENBQUFBO1lBQ3JCLElBQUlBLEtBQUtFLGNBQWMsRUFBRTtnQkFDdkJvRCxNQUFNRSxHQUFHLENBQUMsSUFBSXRGLEtBQUs4QixLQUFLRSxjQUFjLEVBQUUvQixXQUFXO1lBQ3JEO1FBQ0Y7UUFDQSxNQUFNc0YsY0FBY0MsTUFBTWpGLElBQUksQ0FBQzZFLE9BQU9LLElBQUksQ0FBQyxDQUFDQyxHQUFHQyxJQUFNQSxJQUFJRDtRQUV6RCxJQUFJSCxZQUFZNUUsTUFBTSxLQUFLLEdBQUc7WUFDNUJSLGtCQUFrQjtnQkFBQyxJQUFJSCxPQUFPQyxXQUFXO2FBQUc7UUFDOUMsT0FBTztZQUNMRSxrQkFBa0JvRjtRQUNwQjtRQUVBLElBQUlBLFlBQVk1RSxNQUFNLEdBQUcsS0FBSyxDQUFDNEUsWUFBWUssUUFBUSxDQUFDOUYsZUFBZTtZQUNqRUMsZ0JBQWdCd0YsV0FBVyxDQUFDLEVBQUU7UUFDaEM7SUFDRixHQUFHO1FBQUNuRztRQUFnQlU7S0FBYTtJQUVqQyxPQUFPO1FBQ0xaO1FBQ0FFO1FBQ0FDO1FBQ0FDO1FBQ0FFO1FBQ0FFO1FBQ0FFO1FBQ0FFO1FBQ0FDO1FBQ0FHO1FBQ0FvQztRQUNBUTtRQUNBUTtRQUNBRztRQUNBckQ7UUFDQVE7UUFDQVc7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2hvb2tzL3VzZS10cmFkZS1zdHJlYWsudHM/NmUwNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcclxuXHJcbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IFByb2plY3QsIFRhc2sgfSBmcm9tICdAL3R5cGVzJ1xyXG5pbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tICdAc3VwYWJhc2Uvc3VwYWJhc2UtanMnXHJcblxyXG5jb25zdCBzdXBhYmFzZSA9IGNyZWF0ZUNsaWVudChwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwhLCBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSEpXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXNlVHJhZGVTdHJlYWsodXNlcklkOiBzdHJpbmcgfCB1bmRlZmluZWQpIHtcclxuICBjb25zdCBbcHJvamVjdHMsIHNldFByb2plY3RzXSA9IHVzZVN0YXRlPFByb2plY3RbXT4oW10pXHJcbiAgY29uc3QgW2N1cnJlbnRQcm9qZWN0LCBzZXRDdXJyZW50UHJvamVjdF0gPSB1c2VTdGF0ZTxQcm9qZWN0IHwgbnVsbD4obnVsbClcclxuICBjb25zdCBbdGFza3MsIHNldFRhc2tzXSA9IHVzZVN0YXRlPFRhc2tbXT4oW10pXHJcbiAgY29uc3QgW3N0cmVhaywgc2V0U3RyZWFrXSA9IHVzZVN0YXRlKDApXHJcbiAgY29uc3QgW2NvbXBsZXRlZFRvZGF5LCBzZXRDb21wbGV0ZWRUb2RheV0gPSB1c2VTdGF0ZSgwKVxyXG4gIGNvbnN0IFtjb21wbGV0ZWREYXlzLCBzZXRDb21wbGV0ZWREYXlzXSA9IHVzZVN0YXRlPG51bWJlcltdPihbXSlcclxuICBjb25zdCBbc2VsZWN0ZWRZZWFyLCBzZXRTZWxlY3RlZFllYXJdID0gdXNlU3RhdGUobmV3IERhdGUoKS5nZXRGdWxsWWVhcigpKVxyXG4gIGNvbnN0IFthdmFpbGFibGVZZWFycywgc2V0QXZhaWxhYmxlWWVhcnNdID0gdXNlU3RhdGU8bnVtYmVyW10+KFtdKVxyXG5cclxuICBjb25zdCBmZXRjaFByb2plY3RzID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xyXG4gICAgaWYgKCF1c2VySWQpIHJldHVyblxyXG5cclxuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKCdwcm9qZWN0cycpXHJcbiAgICAgIC5zZWxlY3QoJyonKVxyXG4gICAgICAuZXEoJ3VzZXJfaWQnLCB1c2VySWQpXHJcbiAgICBcclxuICAgIGlmIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBwcm9qZWN0czonLCBlcnJvcilcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGRhdGEpIHtcclxuICAgICAgc2V0UHJvamVjdHMoZGF0YSlcclxuICAgICAgaWYgKGRhdGEubGVuZ3RoID4gMCAmJiAhY3VycmVudFByb2plY3QpIHtcclxuICAgICAgICBzZXRDdXJyZW50UHJvamVjdChkYXRhWzBdKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSwgW3VzZXJJZCwgY3VycmVudFByb2plY3RdKVxyXG5cclxuICBjb25zdCBmZXRjaFRhc2tzID0gdXNlQ2FsbGJhY2soYXN5bmMgKHByb2plY3RJZDogc3RyaW5nKSA9PiB7XHJcbiAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdXHJcblxyXG4gICAgY29uc3QgeyBkYXRhOiBhbGxUYXNrcywgZXJyb3I6IHRhc2tzRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKCd0YXNrcycpXHJcbiAgICAgIC5zZWxlY3QoJyonKVxyXG4gICAgICAuZXEoJ3Byb2plY3RfaWQnLCBwcm9qZWN0SWQpXHJcbiAgICBcclxuICAgIGlmICh0YXNrc0Vycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHRhc2tzOicsIHRhc2tzRXJyb3IpXHJcbiAgICAgIHJldHVyblxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHsgY291bnQsIGVycm9yOiBjb3VudEVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAuZnJvbSgndGFza3MnKVxyXG4gICAgICAuc2VsZWN0KCcqJywgeyBjb3VudDogJ2V4YWN0JywgaGVhZDogdHJ1ZSB9KVxyXG4gICAgICAuZXEoJ3Byb2plY3RfaWQnLCBwcm9qZWN0SWQpXHJcbiAgICAgIC5lcSgnY29tcGxldGVkJywgdHJ1ZSlcclxuICAgICAgLmVxKCdjb21wbGV0ZWRfZGF0ZScsIHRvZGF5KVxyXG5cclxuICAgIGlmIChjb3VudEVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNvdW50aW5nIGNvbXBsZXRlZCB0YXNrczonLCBjb3VudEVycm9yKVxyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuXHJcbiAgICBpZiAoYWxsVGFza3MpIHtcclxuICAgICAgc2V0VGFza3MoYWxsVGFza3MpXHJcbiAgICAgIHNldENvbXBsZXRlZFRvZGF5KGNvdW50IHx8IDApXHJcbiAgICAgIHVwZGF0ZVN0YXRzKGFsbFRhc2tzLCBwcm9qZWN0SWQpXHJcbiAgICB9XHJcbiAgfSwgW10pXHJcblxyXG4gIGNvbnN0IGZldGNoQ29tcGxldGVkRGF5cyA9IHVzZUNhbGxiYWNrKGFzeW5jIChwcm9qZWN0SWQ6IHN0cmluZywgeWVhcjogbnVtYmVyKSA9PiB7XHJcbiAgICBjb25zdCBzdGFydERhdGUgPSBuZXcgRGF0ZSh5ZWFyLCAwLCAxKS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF07XHJcbiAgICBjb25zdCBlbmREYXRlID0gbmV3IERhdGUoeWVhciwgMTEsIDMxKS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF07XHJcblxyXG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgLmZyb20oJ3Rhc2tzJylcclxuICAgICAgLnNlbGVjdCgnY29tcGxldGVkX2RhdGUnKVxyXG4gICAgICAuZXEoJ3Byb2plY3RfaWQnLCBwcm9qZWN0SWQpXHJcbiAgICAgIC5lcSgnY29tcGxldGVkJywgdHJ1ZSlcclxuICAgICAgLmd0ZSgnY29tcGxldGVkX2RhdGUnLCBzdGFydERhdGUpXHJcbiAgICAgIC5sdGUoJ2NvbXBsZXRlZF9kYXRlJywgZW5kRGF0ZSk7XHJcblxyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGNvbXBsZXRlZCBkYXlzOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChkYXRhKSB7XHJcbiAgICAgIGNvbnN0IGNvbXBsZXRlZERheXMgPSBkYXRhLm1hcCh0YXNrID0+IHtcclxuICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUodGFzay5jb21wbGV0ZWRfZGF0ZSEpO1xyXG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKChkYXRlLmdldFRpbWUoKSAtIG5ldyBEYXRlKHllYXIsIDAsIDApLmdldFRpbWUoKSkgLyAoMjQgKiA2MCAqIDYwICogMTAwMCkpO1xyXG4gICAgICB9KTtcclxuICAgICAgc2V0Q29tcGxldGVkRGF5cyhbLi4ubmV3IFNldChjb21wbGV0ZWREYXlzKV0pO1xyXG4gICAgfVxyXG4gIH0sIFtdKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmICh1c2VySWQpIHtcclxuICAgICAgZmV0Y2hQcm9qZWN0cygpXHJcbiAgICB9XHJcbiAgfSwgW3VzZXJJZCwgZmV0Y2hQcm9qZWN0c10pXHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAoY3VycmVudFByb2plY3QpIHtcclxuICAgICAgZmV0Y2hUYXNrcyhjdXJyZW50UHJvamVjdC5pZClcclxuICAgIH1cclxuICB9LCBbY3VycmVudFByb2plY3QsIGZldGNoVGFza3NdKVxyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaWYgKGN1cnJlbnRQcm9qZWN0ICYmIHNlbGVjdGVkWWVhcikge1xyXG4gICAgICBmZXRjaENvbXBsZXRlZERheXMoY3VycmVudFByb2plY3QuaWQsIHNlbGVjdGVkWWVhcik7XHJcbiAgICB9XHJcbiAgfSwgW2N1cnJlbnRQcm9qZWN0LCBzZWxlY3RlZFllYXIsIGZldGNoQ29tcGxldGVkRGF5c10pO1xyXG5cclxuICBjb25zdCBhZGRQcm9qZWN0ID0gYXN5bmMgKG5hbWU6IHN0cmluZywgdHJhZGluZ0RheXNQZXJXZWVrOiBudW1iZXIsIHVzZXJJZDogc3RyaW5nKSA9PiB7XHJcbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAuZnJvbSgncHJvamVjdHMnKVxyXG4gICAgICAuaW5zZXJ0KHsgbmFtZSwgdHJhZGluZ19kYXlzX3Blcl93ZWVrOiB0cmFkaW5nRGF5c1BlcldlZWssIHVzZXJfaWQ6IHVzZXJJZCB9KVxyXG4gICAgICAuc2VsZWN0KClcclxuICAgIFxyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFkZGluZyBwcm9qZWN0OicsIGVycm9yKVxyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuXHJcbiAgICBpZiAoZGF0YSAmJiBkYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uc3QgbmV3UHJvamVjdCA9IGRhdGFbMF0gYXMgUHJvamVjdFxyXG4gICAgICBzZXRQcm9qZWN0cyhwcmV2UHJvamVjdHMgPT4gWy4uLnByZXZQcm9qZWN0cywgbmV3UHJvamVjdF0pXHJcbiAgICAgIHNldEN1cnJlbnRQcm9qZWN0KG5ld1Byb2plY3QpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdCBhZGRUYXNrID0gYXN5bmMgKGNvbnRlbnQ6IHN0cmluZykgPT4ge1xyXG4gICAgaWYgKGNvbnRlbnQudHJpbSgpICYmIGN1cnJlbnRQcm9qZWN0ICYmIHVzZXJJZCkge1xyXG4gICAgICBjb25zdCBuZXdUYXNrID0ge1xyXG4gICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQudHJpbSgpLFxyXG4gICAgICAgIHByb2plY3RfaWQ6IGN1cnJlbnRQcm9qZWN0LmlkLFxyXG4gICAgICAgIGNvbXBsZXRlZDogZmFsc2UsXHJcbiAgICAgICAgY29tcGxldGVkX2RhdGU6IG51bGwsXHJcbiAgICAgICAgdXNlcl9pZDogdXNlcklkXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgICAgLmZyb20oJ3Rhc2tzJylcclxuICAgICAgICAuaW5zZXJ0KG5ld1Rhc2spXHJcbiAgICAgICAgLnNlbGVjdCgpXHJcbiAgICAgIFxyXG4gICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBhZGRpbmcgdGFzazonLCBlcnJvcilcclxuICAgICAgICByZXR1cm5cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGRhdGEgJiYgZGF0YS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgY29uc3QgYWRkZWRUYXNrID0gZGF0YVswXSBhcyBUYXNrXHJcbiAgICAgICAgY29uc3QgdXBkYXRlZFRhc2tzID0gWy4uLnRhc2tzLCBhZGRlZFRhc2tdXHJcbiAgICAgICAgc2V0VGFza3ModXBkYXRlZFRhc2tzKVxyXG4gICAgICAgIHVwZGF0ZVN0YXRzKHVwZGF0ZWRUYXNrcywgY3VycmVudFByb2plY3QuaWQpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbnN0IGRlbGV0ZVRhc2sgPSBhc3luYyAoaWQ6IHN0cmluZykgPT4ge1xyXG4gICAgaWYgKCFjdXJyZW50UHJvamVjdCkgcmV0dXJuXHJcblxyXG4gICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgLmZyb20oJ3Rhc2tzJylcclxuICAgICAgLmRlbGV0ZSgpXHJcbiAgICAgIC5lcSgnaWQnLCBpZClcclxuICAgIFxyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGRlbGV0aW5nIHRhc2s6JywgZXJyb3IpXHJcbiAgICAgIHJldHVyblxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHVwZGF0ZWRUYXNrcyA9IHRhc2tzLmZpbHRlcih0YXNrID0+IHRhc2suaWQgIT09IGlkKVxyXG4gICAgc2V0VGFza3ModXBkYXRlZFRhc2tzKVxyXG4gICAgdXBkYXRlU3RhdHModXBkYXRlZFRhc2tzLCBjdXJyZW50UHJvamVjdC5pZClcclxuICB9XHJcblxyXG4gIGNvbnN0IHRvZ2dsZUNvbXBsZXRlID0gYXN5bmMgKGlkOiBzdHJpbmcpID0+IHtcclxuICAgIGlmICghY3VycmVudFByb2plY3QpIHJldHVyblxyXG5cclxuICAgIGNvbnN0IHRhc2sgPSB0YXNrcy5maW5kKHQgPT4gdC5pZCA9PT0gaWQpXHJcbiAgICBpZiAodGFzaykge1xyXG4gICAgICBjb25zdCB1cGRhdGVkVGFzayA9IHtcclxuICAgICAgICAuLi50YXNrLFxyXG4gICAgICAgIGNvbXBsZXRlZDogIXRhc2suY29tcGxldGVkLFxyXG4gICAgICAgIGNvbXBsZXRlZF9kYXRlOiAhdGFzay5jb21wbGV0ZWQgPyBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXSA6IG51bGxcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgICAuZnJvbSgndGFza3MnKVxyXG4gICAgICAgIC51cGRhdGUodXBkYXRlZFRhc2spXHJcbiAgICAgICAgLmVxKCdpZCcsIGlkKVxyXG4gICAgICAgIC5zZWxlY3QoKVxyXG4gICAgICBcclxuICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgdXBkYXRpbmcgdGFzazonLCBlcnJvcilcclxuICAgICAgICByZXR1cm5cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGRhdGEgJiYgZGF0YS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgY29uc3QgdXBkYXRlZFRhc2tGcm9tREIgPSBkYXRhWzBdIGFzIFRhc2tcclxuICAgICAgICBjb25zdCB1cGRhdGVkVGFza3MgPSB0YXNrcy5tYXAodCA9PiB0LmlkID09PSBpZCA/IHVwZGF0ZWRUYXNrRnJvbURCIDogdClcclxuICAgICAgICBzZXRUYXNrcyh1cGRhdGVkVGFza3MpXHJcbiAgICAgICAgdXBkYXRlU3RhdHModXBkYXRlZFRhc2tzLCBjdXJyZW50UHJvamVjdC5pZClcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29uc3QgdXBkYXRlU3RhdHMgPSB1c2VDYWxsYmFjayhhc3luYyAoY3VycmVudFRhc2tzOiBUYXNrW10sIHByb2plY3RJZDogc3RyaW5nKSA9PiB7XHJcbiAgICBpZiAoIWN1cnJlbnRQcm9qZWN0KSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXTtcclxuXHJcbiAgICAvLyBGZXRjaCBjb21wbGV0ZWQgdGFza3MgZm9yIHRoZSBsYXN0IDM2NSBkYXlzXHJcbiAgICBjb25zdCBvbmVZZWFyQWdvID0gbmV3IERhdGUoKTtcclxuICAgIG9uZVllYXJBZ28uc2V0RnVsbFllYXIob25lWWVhckFnby5nZXRGdWxsWWVhcigpIC0gMSk7XHJcbiAgICBjb25zdCBvbmVZZWFyQWdvU3RyaW5nID0gb25lWWVhckFnby50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF07XHJcblxyXG4gICAgY29uc3QgeyBkYXRhOiBjb21wbGV0ZWRUYXNrcywgZXJyb3I6IGNvbXBsZXRlZFRhc2tzRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKCd0YXNrcycpXHJcbiAgICAgIC5zZWxlY3QoJ2NvbXBsZXRlZF9kYXRlJylcclxuICAgICAgLmVxKCdwcm9qZWN0X2lkJywgcHJvamVjdElkKVxyXG4gICAgICAuZXEoJ2NvbXBsZXRlZCcsIHRydWUpXHJcbiAgICAgIC5ndGUoJ2NvbXBsZXRlZF9kYXRlJywgb25lWWVhckFnb1N0cmluZylcclxuICAgICAgLm9yZGVyKCdjb21wbGV0ZWRfZGF0ZScsIHsgYXNjZW5kaW5nOiBmYWxzZSB9KTtcclxuXHJcbiAgICBpZiAoY29tcGxldGVkVGFza3NFcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBjb21wbGV0ZWQgdGFza3M6JywgY29tcGxldGVkVGFza3NFcnJvcik7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDb3VudCBjb21wbGV0ZWQgdGFza3MgZm9yIHRvZGF5XHJcbiAgICBjb25zdCBjb21wbGV0ZWRUb2RheSA9IGNvbXBsZXRlZFRhc2tzLmZpbHRlcih0YXNrID0+IHRhc2suY29tcGxldGVkX2RhdGUgPT09IHRvZGF5KS5sZW5ndGg7XHJcbiAgICBzZXRDb21wbGV0ZWRUb2RheShjb21wbGV0ZWRUb2RheSk7XHJcblxyXG4gICAgLy8gQ2FsY3VsYXRlIHN0cmVha1xyXG4gICAgbGV0IGN1cnJlbnRTdHJlYWsgPSAwO1xyXG4gICAgbGV0IGNvbnNlY3V0aXZlRGF5cyA9IDA7XHJcbiAgICBsZXQgbGFzdENvbXBsZXRlZERhdGUgPSBuZXcgRGF0ZSh0b2RheSk7XHJcbiAgICBjb25zdCB0cmFkaW5nRGF5c1BlcldlZWsgPSBjdXJyZW50UHJvamVjdC50cmFkaW5nX2RheXNfcGVyX3dlZWs7XHJcblxyXG4gICAgZm9yIChjb25zdCB0YXNrIG9mIGNvbXBsZXRlZFRhc2tzKSB7XHJcbiAgICAgIGNvbnN0IHRhc2tEYXRlID0gbmV3IERhdGUodGFzay5jb21wbGV0ZWRfZGF0ZSEpO1xyXG4gICAgICBjb25zdCBkYXlzRGlmZmVyZW5jZSA9IE1hdGguZmxvb3IoKGxhc3RDb21wbGV0ZWREYXRlLmdldFRpbWUoKSAtIHRhc2tEYXRlLmdldFRpbWUoKSkgLyAoMTAwMCAqIDYwICogNjAgKiAyNCkpO1xyXG5cclxuICAgICAgaWYgKGRheXNEaWZmZXJlbmNlID09PSAwKSB7XHJcbiAgICAgICAgLy8gU2FtZSBkYXksIGNvbnRpbnVlXHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH0gZWxzZSBpZiAoZGF5c0RpZmZlcmVuY2UgPT09IDEpIHtcclxuICAgICAgICAvLyBDb25zZWN1dGl2ZSBkYXlcclxuICAgICAgICBjb25zZWN1dGl2ZURheXMrKztcclxuICAgICAgICBjdXJyZW50U3RyZWFrKys7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gQnJlYWsgaW4gc3RyZWFrXHJcbiAgICAgICAgY29uc3Qgd2Vla3NEaWZmZXJlbmNlID0gTWF0aC5mbG9vcihkYXlzRGlmZmVyZW5jZSAvIDcpO1xyXG4gICAgICAgIGNvbnN0IHJlbWFpbmluZ0RheXMgPSBkYXlzRGlmZmVyZW5jZSAlIDc7XHJcblxyXG4gICAgICAgIGlmICh3ZWVrc0RpZmZlcmVuY2UgPT09IDAgJiYgcmVtYWluaW5nRGF5cyA8PSAoNyAtIHRyYWRpbmdEYXlzUGVyV2VlaykpIHtcclxuICAgICAgICAgIC8vIFN0aWxsIHdpdGhpbiB0aGUgYWxsb3dlZCBub24tdHJhZGluZyBkYXlzXHJcbiAgICAgICAgICBjb25zZWN1dGl2ZURheXMrKztcclxuICAgICAgICAgIGN1cnJlbnRTdHJlYWsrKztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgLy8gU3RyZWFrIGlzIGJyb2tlblxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDaGVjayBpZiB3ZSd2ZSBjb21wbGV0ZWQgbW9yZSBkYXlzIHRoYW4gdHJhZGluZ19kYXlzX3Blcl93ZWVrIGluIHRoZSBjdXJyZW50IHdlZWtcclxuICAgICAgY29uc3Qgc3RhcnRPZldlZWsgPSBuZXcgRGF0ZSh0YXNrRGF0ZSk7XHJcbiAgICAgIHN0YXJ0T2ZXZWVrLnNldERhdGUoc3RhcnRPZldlZWsuZ2V0RGF0ZSgpIC0gc3RhcnRPZldlZWsuZ2V0RGF5KCkpO1xyXG4gICAgICBjb25zdCB0YXNrc1RoaXNXZWVrID0gY29tcGxldGVkVGFza3MuZmlsdGVyKHQgPT4gXHJcbiAgICAgICAgbmV3IERhdGUodC5jb21wbGV0ZWRfZGF0ZSEpID49IHN0YXJ0T2ZXZWVrICYmIFxyXG4gICAgICAgIG5ldyBEYXRlKHQuY29tcGxldGVkX2RhdGUhKSA8PSB0YXNrRGF0ZVxyXG4gICAgICApLmxlbmd0aDtcclxuXHJcbiAgICAgIGlmICh0YXNrc1RoaXNXZWVrID4gdHJhZGluZ0RheXNQZXJXZWVrKSB7XHJcbiAgICAgICAgLy8gUmVzZXQgc3RyZWFrIGlmIG1vcmUgZGF5cyBjb21wbGV0ZWQgdGhhbiB0cmFkaW5nX2RheXNfcGVyX3dlZWtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG5cclxuICAgICAgbGFzdENvbXBsZXRlZERhdGUgPSB0YXNrRGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRTdHJlYWsoY3VycmVudFN0cmVhayk7XHJcblxyXG4gICAgLy8gVXBkYXRlIGNvbXBsZXRlZCBkYXlzIGZvciB0aGUgY29udHJpYnV0aW9ucyBjaGFydFxyXG4gICAgY29uc3QgY29tcGxldGVkRGF5c0luU2VsZWN0ZWRZZWFyID0gY29tcGxldGVkVGFza3NcclxuICAgICAgLmZpbHRlcih0YXNrID0+IG5ldyBEYXRlKHRhc2suY29tcGxldGVkX2RhdGUhKS5nZXRGdWxsWWVhcigpID09PSBzZWxlY3RlZFllYXIpXHJcbiAgICAgIC5tYXAodGFzayA9PiB7XHJcbiAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHRhc2suY29tcGxldGVkX2RhdGUhKTtcclxuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcigoZGF0ZS5nZXRUaW1lKCkgLSBuZXcgRGF0ZShzZWxlY3RlZFllYXIsIDAsIDApLmdldFRpbWUoKSkgLyAoMjQgKiA2MCAqIDYwICogMTAwMCkpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICBzZXRDb21wbGV0ZWREYXlzKFsuLi5uZXcgU2V0KGNvbXBsZXRlZERheXNJblNlbGVjdGVkWWVhcildKTtcclxuXHJcbiAgICAvLyBVcGRhdGUgYXZhaWxhYmxlIHllYXJzXHJcbiAgICBjb25zdCB5ZWFycyA9IG5ldyBTZXQ8bnVtYmVyPigpO1xyXG4gICAgY29tcGxldGVkVGFza3MuZm9yRWFjaCh0YXNrID0+IHtcclxuICAgICAgaWYgKHRhc2suY29tcGxldGVkX2RhdGUpIHtcclxuICAgICAgICB5ZWFycy5hZGQobmV3IERhdGUodGFzay5jb21wbGV0ZWRfZGF0ZSkuZ2V0RnVsbFllYXIoKSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgY29uc3Qgc29ydGVkWWVhcnMgPSBBcnJheS5mcm9tKHllYXJzKS5zb3J0KChhLCBiKSA9PiBiIC0gYSk7XHJcbiAgICBcclxuICAgIGlmIChzb3J0ZWRZZWFycy5sZW5ndGggPT09IDApIHtcclxuICAgICAgc2V0QXZhaWxhYmxlWWVhcnMoW25ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKV0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc2V0QXZhaWxhYmxlWWVhcnMoc29ydGVkWWVhcnMpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChzb3J0ZWRZZWFycy5sZW5ndGggPiAwICYmICFzb3J0ZWRZZWFycy5pbmNsdWRlcyhzZWxlY3RlZFllYXIpKSB7XHJcbiAgICAgIHNldFNlbGVjdGVkWWVhcihzb3J0ZWRZZWFyc1swXSk7XHJcbiAgICB9XHJcbiAgfSwgW2N1cnJlbnRQcm9qZWN0LCBzZWxlY3RlZFllYXJdKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHByb2plY3RzLFxyXG4gICAgY3VycmVudFByb2plY3QsXHJcbiAgICBzZXRDdXJyZW50UHJvamVjdCxcclxuICAgIHRhc2tzLFxyXG4gICAgc3RyZWFrLFxyXG4gICAgY29tcGxldGVkVG9kYXksXHJcbiAgICBjb21wbGV0ZWREYXlzLFxyXG4gICAgc2VsZWN0ZWRZZWFyLFxyXG4gICAgc2V0U2VsZWN0ZWRZZWFyLFxyXG4gICAgYXZhaWxhYmxlWWVhcnMsXHJcbiAgICBhZGRQcm9qZWN0LFxyXG4gICAgYWRkVGFzayxcclxuICAgIGRlbGV0ZVRhc2ssXHJcbiAgICB0b2dnbGVDb21wbGV0ZSxcclxuICAgIGZldGNoUHJvamVjdHMsXHJcbiAgICBmZXRjaFRhc2tzLFxyXG4gICAgZmV0Y2hDb21wbGV0ZWREYXlzLFxyXG4gIH1cclxufSJdLCJuYW1lcyI6WyJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUNhbGxiYWNrIiwiY3JlYXRlQ2xpZW50Iiwic3VwYWJhc2UiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMIiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVkiLCJ1c2VUcmFkZVN0cmVhayIsInVzZXJJZCIsInByb2plY3RzIiwic2V0UHJvamVjdHMiLCJjdXJyZW50UHJvamVjdCIsInNldEN1cnJlbnRQcm9qZWN0IiwidGFza3MiLCJzZXRUYXNrcyIsInN0cmVhayIsInNldFN0cmVhayIsImNvbXBsZXRlZFRvZGF5Iiwic2V0Q29tcGxldGVkVG9kYXkiLCJjb21wbGV0ZWREYXlzIiwic2V0Q29tcGxldGVkRGF5cyIsInNlbGVjdGVkWWVhciIsInNldFNlbGVjdGVkWWVhciIsIkRhdGUiLCJnZXRGdWxsWWVhciIsImF2YWlsYWJsZVllYXJzIiwic2V0QXZhaWxhYmxlWWVhcnMiLCJmZXRjaFByb2plY3RzIiwiZGF0YSIsImVycm9yIiwiZnJvbSIsInNlbGVjdCIsImVxIiwiY29uc29sZSIsImxlbmd0aCIsImZldGNoVGFza3MiLCJwcm9qZWN0SWQiLCJ0b2RheSIsInRvSVNPU3RyaW5nIiwic3BsaXQiLCJhbGxUYXNrcyIsInRhc2tzRXJyb3IiLCJjb3VudCIsImNvdW50RXJyb3IiLCJoZWFkIiwidXBkYXRlU3RhdHMiLCJmZXRjaENvbXBsZXRlZERheXMiLCJ5ZWFyIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsImd0ZSIsImx0ZSIsIm1hcCIsInRhc2siLCJkYXRlIiwiY29tcGxldGVkX2RhdGUiLCJNYXRoIiwiZmxvb3IiLCJnZXRUaW1lIiwiU2V0IiwiaWQiLCJhZGRQcm9qZWN0IiwibmFtZSIsInRyYWRpbmdEYXlzUGVyV2VlayIsImluc2VydCIsInRyYWRpbmdfZGF5c19wZXJfd2VlayIsInVzZXJfaWQiLCJuZXdQcm9qZWN0IiwicHJldlByb2plY3RzIiwiYWRkVGFzayIsImNvbnRlbnQiLCJ0cmltIiwibmV3VGFzayIsInByb2plY3RfaWQiLCJjb21wbGV0ZWQiLCJhZGRlZFRhc2siLCJ1cGRhdGVkVGFza3MiLCJkZWxldGVUYXNrIiwiZGVsZXRlIiwiZmlsdGVyIiwidG9nZ2xlQ29tcGxldGUiLCJmaW5kIiwidCIsInVwZGF0ZWRUYXNrIiwidXBkYXRlIiwidXBkYXRlZFRhc2tGcm9tREIiLCJjdXJyZW50VGFza3MiLCJvbmVZZWFyQWdvIiwic2V0RnVsbFllYXIiLCJvbmVZZWFyQWdvU3RyaW5nIiwiY29tcGxldGVkVGFza3MiLCJjb21wbGV0ZWRUYXNrc0Vycm9yIiwib3JkZXIiLCJhc2NlbmRpbmciLCJjdXJyZW50U3RyZWFrIiwiY29uc2VjdXRpdmVEYXlzIiwibGFzdENvbXBsZXRlZERhdGUiLCJ0YXNrRGF0ZSIsImRheXNEaWZmZXJlbmNlIiwid2Vla3NEaWZmZXJlbmNlIiwicmVtYWluaW5nRGF5cyIsInN0YXJ0T2ZXZWVrIiwic2V0RGF0ZSIsImdldERhdGUiLCJnZXREYXkiLCJ0YXNrc1RoaXNXZWVrIiwiY29tcGxldGVkRGF5c0luU2VsZWN0ZWRZZWFyIiwieWVhcnMiLCJmb3JFYWNoIiwiYWRkIiwic29ydGVkWWVhcnMiLCJBcnJheSIsInNvcnQiLCJhIiwiYiIsImluY2x1ZGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/use-trade-streak.ts\n"));

/***/ })

});